<?php

namespace Larabookir\Gateway\Sadad;

use SoapClient;
use Larabookir\Gateway\PortAbstract;
use Larabookir\Gateway\PortInterface;

class Sadad extends PortAbstract implements PortInterface
{
	/**
	 * Url of sadad gateway web service
	 *
	 * @var string
	 */
	protected $paymentRequestUrl = 'https://sadad.shaparak.ir/api/v0/Request/PaymentRequest';
	protected $paymentUrl = 'https://sadad.shaparak.ir/VPG/Purchase?Token=';
	protected $verifyUrl = 'https://sadad.shaparak.ir/vpg/api/v0/Advice/Verify';

	/**
	 * Form generated by sadad gateway
	 *
	 * @var string
	 */
	private $token = '';
	private $additionalData = '';
	private $mobile = null;

	/**
	 * {@inheritdoc}
	 */
	public function set($amount)
	{
		$this->amount = intval($amount);

		return $this;
	}

	/**
	 * {@inheritdoc}
	 */
	public function ready()
	{
		$this->sendPayRequest();

		return $this;
	}

	/**
	 * {@inheritdoc}
	 */
	public function redirect()
	{
		return \View::make('gateway::sadad-redirector')->with([
			'token'	=>	$this->token,
			'paymentUrl' =>	$this->paymentUrl
		]);
	}

	/**
	 * {@inheritdoc}
	 */
	public function verify($transaction)
	{
		parent::verify($transaction);

		$this->verifyPayment();

		return $this;
	}

	/**
	 * Sets callback url
	 * @param $url
	 */
	function setCallback($url)
	{
		$this->callbackUrl = $url;
		return $this;
	}

	public function setOptionalData($data) {
		$this->additionalData = $data;
	}

	public function setMobile(string $mobile){
		$this->mobile = $mobile;
	}

	/**
	 * Gets callback url
	 * @return string
	 */
	function getCallback()
	{
		if (!$this->callbackUrl)
			$this->callbackUrl = $this->config->get($this->terminal.'.callback-url');

		return $this->makeCallback($this->callbackUrl, ['transaction_id' => $this->transactionId()]);
	}

	/**
	 * Send pay request to server
	 *
	 * @return void
	 *
	 * @throws SadadException
	 */
	protected function sendPayRequest()
	{
		$this->newTransaction();

		$this->form = '';

		$data = json_encode($data = [
			'TerminalId'=> $this->getTerminalId(),
			'MerchantId'=> $this->getMerchantId(),
			'Amount'	=> $this->amount,
			'SignData'  => $this->encryption($this->getTerminalId().';'.$this->transactionId().';'.$this->amount),
			'ReturnUrl' => $this->getCallback(),
			'LocalDateTime'=> date("m/d/Y g:i:s a"),
			'OrderId'	   => $this->transactionId(),
			'UserId'		=> $this->mobile,
			'AdditionalData'	=>	$this->additionalData
		]);
		
		try {
			$response = $this->callApi($this->paymentRequestUrl, $data);

			if(!is_object($response))
				throw new SadadException('خطا در ارتباط با بانک', -101);

			if($response->ResCode == 0){
				$this->token = $response->Token;
				$this->refId = $response->Token;
				$this->transactionSetRefId();
			}else{
				$this->transactionFailed();
				$this->newLog($response->ResCode, $response->Description);
				throw new SadadException($response->Description, $response->ResCode);
			}
		}catch(\SadadException $e){
			$this->newLog($e->getCode(), $e->getMessage());
			throw new SadadException($e->getCode(), $e->getMessage());
		}catch(\Exception $e){
			$this->newLog($e->getCode(), $e->getMessage());
			throw $e;
		}
	}

	private function callApi($url, $data){
		try {
			$curl = curl_init($url);
			curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'POST');
			curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
			curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json','Content-Length: ' . strlen($data)));
			$response = curl_exec($curl);
			curl_close($curl);
			
			return json_decode($response);
		}catch(\Exception $e) {
			throw $e;
		}
	}

	/**
	 * Verify user payment from bank server
	 *
	 * @throws SadadException
	 */
	protected function verifyPayment()
	{
		try{
			$this->cardNumber = request()->get('PrimaryAccNo');

			if(!request()->has('ResCode'))
				throw new SadadException('تراکنش به دلایلی ناموفق بوده است.', -1);

			if(request()->get('ResCode') == -1){
				throw new SadadException('تراکنش به دلایلی ناموفق بوده است.', request()->get('SwitchResCode'));
			}
	
			$data = json_encode([
				'Token'	=>	request()->get('token'),
				'SignData'	=>	$this->encryption(request()->get('token'))
			]);

			$response = $this->callApi($this->verifyUrl, $data);

			if(!is_object($response))
				throw new SadadException('اطلاعات ارسالی از سمت بانک ناقص می‌باشد', -101);
			
			if($response->ResCode == 0 && $response->ResCode != -1){
				$this->trackingCode = $response->SystemTraceNo;
	
				$this->transactionSucceed();
			}else{
				throw new SadadException($response->Description, $response->ResCode);
			}
		}catch(\SadadException $e){
			$this->transactionFailed();
			$this->newLog($e->getCode(), $e->getMessage());
			throw $e;
		}catch(\Exception $e){
			$this->transactionFailed();
			$this->newLog($e->getCode(), $e->getMessage());

			throw $e;
		}
	}


	//Create sign data(Tripledes(ECB,PKCS7))
	private function encryption($str)
	{
		$ciphertext = OpenSSL_encrypt($str, "DES-EDE3", $this->getTransactionKeyCode(), OPENSSL_RAW_DATA);

		return base64_encode($ciphertext);
		
	}

	private function getTransactionKeyCode(){
		return base64_decode($this->config->get($this->terminal)['transactionKey']);
	}

	private function getMerchantId() {
		return $this->config->get($this->terminal)['merchant'];
	}

	private function getTerminalId() {
		return $this->config->get($this->terminal)['terminalId'];
	}

	/**
	 * Register error to error list
	 *
	 * @param int $code
	 * @param string $message
	 *
	 * @return array|null
	 *
	 * @throws SadadException
	 */
	private function getMessage($code, $message)
	{
		$result = SadadResult::codeResponse($code, $message);
		if ($result) {
			return $result;
		}
		$result = array(
			'code' => SadadResult::UNKNOWN_CODE,
			'message' => SadadResult::UNKNOWN_MESSAGE,
			'fa' => 'خطای ناشناخته',
			'en' => 'Unknown Error',
			'retry' => false
		);
		

		return $result;
	}
}
